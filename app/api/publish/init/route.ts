import { NextResponse } from "next/server";
import { requireUser } from "@/lib/auth/clerk";
import { initializePublishSession } from "@/lib/session-utils";
import { PublishStatus } from "@/lib/store/redis";

export const dynamic = 'force-dynamic';

export interface InitPublishRequest {
  contentId: string;
  metadata?: Record<string, unknown>;
}

export async function POST(req: Request) {
  try {
    const userId = requireUser();
    const { contentId, metadata } = await req.json() as InitPublishRequest;

    if (!contentId) {
      return NextResponse.json(
        { error: "Content ID is required", code: "VALIDATION_ERROR" },
        { status: 400 }
      );
    }

    // Initialize a new publish session
    const session = await initializePublishSession({
      userId,
      contentId,
      metadata,
      // Provide default values for required fields
      nonce: undefined, // Will be generated by initializePublishSession
      gh: undefined // Optional field
    });
    
    if (!session) {
      throw new Error('Failed to initialize publish session');
    }

    // Return the minimal required session data
    return NextResponse.json({
      sessionId: session.id,
      nonce: session.nonce,
      contentId: session.contentId,
      status: session.status as PublishStatus,
      createdAt: new Date(session.createdAt).toISOString()
    });

  } catch (error) {
    console.error("Publish init error:", error);
    
    if (error instanceof Error) {
      return NextResponse.json(
        { 
          error: error.message, 
          code: error.name === 'Error' ? 'INITIALIZATION_ERROR' : error.name 
        },
        { status: 400 }
      );
    }
    
    return NextResponse.json(
      { 
        error: "Internal server error", 
        code: "INTERNAL_SERVER_ERROR" 
      },
      { status: 500 }
    );
  }
}
