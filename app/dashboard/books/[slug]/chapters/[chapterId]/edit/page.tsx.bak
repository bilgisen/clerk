// app/dashboard/books/[slug]/chapters/[chapterId]/edit/page.tsx
"use client";

import { useState, useRef, useEffect, useCallback } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useAuth } from '@clerk/nextjs';
import { debounce } from 'lodash';
import { toast } from 'sonner';
import { Loader2, ArrowLeft, AlertCircle } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { ChapterContentForm } from '@/components/books/chapters/chapter-content-form';
import { BooksMenu } from '@/components/books/books-menu';
import type { ChapterFormValues } from '@/schemas/chapter-schema';
import { useChapter, useUpdateChapter } from '@/hooks/useChapter';
import { useChaptersBySlug } from '@/hooks/api/use-chapters';
import type { Chapter } from '@/types/chapter';

interface EditChapterPageProps {
  // Add any props if needed
}

export default function EditChapterPage() {
  const router = useRouter();
  const { slug: bookSlug, chapterId } = useParams() as { slug: string; chapterId: string };
  const { getToken } = useAuth();

  // Fetch chapter data using the new hook
  const { 
    data: chapter, 
    isLoading: isChapterLoading, 
    error: chapterError 
  } = useChapter(chapterId);

  // Fetch all chapters for the book
  const { 
    data: chaptersData, 
    isLoading: isChaptersLoading,
    error: chaptersError
  } = useChaptersBySlug(bookSlug);

  // Update chapter mutation
  const { mutateAsync: updateChapter, isPending: isUpdating } = useUpdateChapter();

  // State management
  const [isSaving, setIsSaving] = useState(false);
  const [lastSaved, setLastSaved] = useState<Date | null>(null);
  const [formError, setFormError] = useState<string | null>(null);

  // Refs
  const formRef = useRef<HTMLFormElement>(null);
  const formDataRef = useRef<ChapterFormValues | null>(null);

  // Debounced autosave function
  const debouncedSave = useCallback(
    debounce(async (data: ChapterFormValues) => {
      if (!chapterId) return;

      try {
        await updateChapter({
          chapterId,
          data: {
            ...data,
            parent_chapter_id: data.parent_chapter_id || null,
            is_published: data.is_published ?? false
          }
        });

        setLastSaved(new Date());
      } catch (error) {
        console.error('Autosave error:', error);
        toast.error('Failed to autosave chapter');
      } finally {
        setIsSaving(false);
      }
    }, 2000), // 2 second debounce
    [chapterId, updateChapter]
  );

  // Cleanup debounce on unmount
  useEffect(() => {
    return () => {
      debouncedSave.cancel();
    };
  }, [debouncedSave]);

  // Handle form changes for autosave
  const handleFormChange = useCallback((data: ChapterFormValues) => {
    formDataRef.current = data;
    setIsSaving(true);
    debouncedSave(data);
  }, [debouncedSave]);

  // Handle form submission
  const handleSubmit = async (values: ChapterFormValues): Promise<{ success: boolean; redirectUrl?: string }> => {
    if (!chapterId) return { success: false };
    
    try {
      setIsSaving(true);
      await updateChapter({
        chapterId,
        data: {
          ...values,
          parent_chapter_id: values.parent_chapter_id || null,
          is_published: values.is_published ?? false
        }
      });

      toast.success('Chapter saved successfully');
      setLastSaved(new Date());

      return { 
        success: true,
        redirectUrl: `/dashboard/books/${bookSlug}/chapters/${chapterId}`
      };
    } catch (error) {
      console.error('Error saving chapter:', error);
      toast.error('Failed to save chapter');
      return { success: false };
    } finally {
      setIsSaving(false);
    }
  };

  // Set initial form data when chapter loads
  useEffect(() => {
    if (chapter) {
      setLastSaved(new Date(chapter.updated_at));
      // Initialize form data
      formDataRef.current = {
        title: chapter.title,
        content: chapter.content || '',
        order: chapter.order,
        level: chapter.level,
        parent_chapter_id: chapter.parent_chapter_id || null,
        is_published: !chapter.is_draft,
        book_id: chapter.book_id,
        slug: chapter.slug
      };
    }
  }, [chapter]);

  // Handle loading and error states
  if (isChapterLoading || isChaptersLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <Loader2 className="w-8 h-8 animate-spin" />
      </div>
    );
  }

  if (chapterError || chaptersError) {
    return (
      <div className="container mx-auto p-6">
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded">
          <div className="flex">
            <AlertCircle className="h-5 w-5 text-red-500 mr-3" />
            <div>
              <h3 className="text-sm font-medium text-red-800">
                Error loading chapter data
              </h3>
              <p className="text-sm text-red-700 mt-1">
                {chapterError?.message || chaptersError?.message}
              </p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (!chapter) {
    return (
      <div className="container mx-auto p-6">
        <p>Chapter not found</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 max-w-6xl">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-4">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => router.push(`/dashboard/books/${bookSlug}`)}
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-2xl font-bold">Edit Chapter</h1>
        </div>
        <div className="flex items-center space-x-4">
          {isSaving ? (
            <span className="text-sm text-muted-foreground flex items-center">
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Saving...
            </span>
          ) : lastSaved ? (
            <span className="text-sm text-muted-foreground">
              Last saved: {new Date(lastSaved).toLocaleTimeString()}
            </span>
          ) : null}
          <Button
            type="submit"
            form="chapter-form"
            disabled={isSaving || isUpdating}
          >
            {isUpdating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Saving...
              </>
            ) : (
              'Save Changes'
            )}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div className="lg:col-span-3">
          {formError && (
            <div className="mb-4 p-4 bg-red-50 border-l-4 border-red-500 rounded">
              <p className="text-sm text-red-700">{formError}</p>
            </div>
          )}
          
          {chapter && formDataRef.current && (
            <ChapterContentForm
              key={chapter.id}
              initialData={formDataRef.current}
              onChange={handleFormChange}
              onSubmit={handleSubmit}
              loading={isUpdating}
              disabled={isUpdating}
              parentChapters={(chaptersData || []).filter((c: Chapter) => c?.id !== chapter?.id).map(ch => ({
                id: ch.id,
                title: ch.title,
                level: ch.level,
                parent_chapter_id: ch.parent_chapter_id || null
              }))}
              currentChapterId={chapterId}
              bookSlug={bookSlug}
            />
          )}
        </div>
        
        <div className="lg:col-span-1">
          <div className="sticky top-6 space-y-6">
            <BooksMenu slug={bookSlug} currentChapterId={chapterId} />
            
            <div className="bg-muted p-4 rounded-lg">
              <h3 className="font-medium mb-2">Chapter Details</h3>
              <div className="space-y-2 text-sm">
                <div>
                  <span className="text-muted-foreground">Created:</span>{' '}
                  {new Date(chapter.created_at).toLocaleDateString()}
                </div>
                <div>
                  <span className="text-muted-foreground">Last Updated:</span>{' '}
                  {new Date(chapter.updated_at).toLocaleString()}
                </div>
                {chapter.parent_chapter_id && (
                  <div>
                    <span className="text-muted-foreground">Parent Chapter:</span>{' '}
                    {(chaptersData || []).find(c => c.id === chapter.parent_chapter_id)?.title || 'N/A'}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
        }
      });
    }
    return result;
  }, [chapter, childrenMap]);

  const parentChapters = useMemo(() => {
    if (!chapter || !Array.isArray(chapters)) return [];
    return chapters
      .filter((c: Chapter) => c?.id !== chapter?.id && !descendants.has(c.id))
      .map((ch: Chapter) => ({
        id: ch.id,
        title: ch.title,
        level: ch.level,
        parent_chapter_id: ch.parent_chapter_id
      }));
  }, [chapters, chapter, descendants]);

  const handleFormChange = useCallback((data: ChapterFormValues) => {
    formDataRef.current = data;
    if (!isSaving) {
      setIsSaving(true);
      debouncedSave(data);
    }
  }, [debouncedSave, isSaving]);

  const handleSubmit = async (formData: ChapterFormValues): Promise<{ success: boolean; redirectUrl?: string }> => {
    if (!userId) return { success: false };
    
    try {
      setIsSubmitting(true);
      setError(null);
      
      const token = await getToken();
      const response = await fetch(`/api/chapters/${chapterId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || 'Failed to update chapter');
      }

      const updatedChapter = await response.json();
      setChapter(updatedChapter);
      setLastSaved(new Date());
      
      // Show success message and prepare for redirect
      toast.success('Chapter updated successfully', {
        duration: 2000,
        onAutoClose: () => {
          // Redirect after the toast is closed
          router.push(`/dashboard/books/${bookSlug}/chapters/${chapterId}`);
          router.refresh(); // Ensure the latest data is shown
        }
      });
      
      return { 
        success: true,
        redirectUrl: `/dashboard/books/${bookSlug}/chapters/${chapterId}`
      };
    } catch (error) {
      console.error('Error updating chapter:', error);
      setError('Failed to update chapter');
      return { success: false };
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64 flex-col space-y-4">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
        <span className="text-muted-foreground">Loading chapter data...</span>
        <div className="text-sm text-muted-foreground">
          <p>Book: {bookSlug}</p>
          <p>Chapter ID: {chapterId}</p>
        </div>
      </div>
    );
  }
  
  if (!chapter) {
    return (
      <div className="flex flex-col items-center justify-center h-64 space-y-4">
        <AlertCircle className="h-12 w-12 text-destructive" />
        <p className="text-lg font-medium">Chapter not found</p>
        <Button variant="outline" onClick={() => router.back()}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Go back
        </Button>
      </div>
    );
  }

  return (
    <div className="w-full max-w-full mx-auto p-4 md:p-8">
      <div className="flex flex-col space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <div className="flex items-center gap-2">
              <h1 className="text-2xl font-bold"><span className="text-muted-foreground">Edit:</span> {chapter.title}</h1>
              {isSaving ? (
                <span className="text-sm text-muted-foreground">Saving...</span>
              ) : lastSaved ? (
                <span className="text-sm text-muted-foreground">
                  Saved at {lastSaved.toLocaleTimeString()}
                </span>
              ) : null}
            </div>
            <p className="text-sm text-muted-foreground">Book: {bookSlug}</p>
          </div>
          <BooksMenu 
            slug={bookSlug}
            bookId={chapter?.book_id || ''}
            onView={() => router.push(`/dashboard/books/${bookSlug}/chapters/${chapterId}`)}
          />
        </div>

        <Separator />

        <div className="relative">
          {isSubmitting && (
            <div className="absolute inset-0 bg-background/80 z-10 flex items-center justify-center">
              <div className="flex items-center gap-2 bg-background p-4 rounded-lg shadow-lg border">
                <Loader2 className="h-5 w-5 animate-spin text-primary" />
                <span>Saving changes...</span>
              </div>
            </div>
          )}
          <ChapterContentForm
            ref={formRef}
            onSubmit={handleSubmit}
            onChange={handleFormChange}
            initialData={{
              title: chapter.title,
              content: chapter.content || '',
              parent_chapter_id: chapter.parent_chapter_id,
              book_id: chapter.book_id,
              order: chapter.order,
              level: chapter.level,
              slug: chapter.slug,
            }}
            parentChapters={parentChapters}
            loading={isSubmitting}
            bookSlug={bookSlug}
            currentChapterId={chapterId}
          />
        </div>

        {formError && (
          <div className="mt-4 p-4 text-sm text-destructive bg-destructive/10 rounded-md">
            {formError}
          </div>
        )}
      </div>
    </div>
  );
}
