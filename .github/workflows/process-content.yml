name: Build and Publish EPUB

on:
  workflow_dispatch:
    inputs:
      content_id:
        description: 'Content ID for the book'
        required: true
        type: string
      format:
        description: 'Output format (epub, mobi, pdf, html, docx)'
        required: true
        default: 'epub'
        type: string
      metadata:
        description: 'Additional metadata as JSON string'
        required: false
        default: '{}'
        type: string

env:
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'https://matbu.vercel.app' }}
  NODE_ENV: production
  JWT_ISSUER: 'https://sunny-dogfish-14.clerk.accounts.dev'
  JWT_AUDIENCE: 'https://sunny-dogfish-14.clerk.accounts.dev'
  CLERK_KEY_ID: 'jtmp_310Eh03rhbpy3wXWHcIaNkwwTpj'
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  PRIVATE_KEY_B64: ${{ secrets.PRIVATE_KEY_B64 }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPO_OWNER: bilgisen
  GITHUB_REPO_NAME: clerk

jobs:
  build-epub:
    name: Build EPUB
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps
          npm install jose

      - name: Install system tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-latex-recommended \
            jq \
            wget \
            parallel

      - name: Decode and verify private key
        id: setup-key
        run: |
          echo "🔑 Decoding private key..."
          echo "${{ secrets.PRIVATE_KEY_B64 }}" | base64 -d > private.pem
          chmod 600 private.pem
          
          # Verify key format
          if ! head -1 private.pem | grep -q "BEGIN PRIVATE KEY"; then
            echo "::error::❌ Invalid private key format. Must be PKCS#8 (starts with BEGIN PRIVATE KEY)"
            exit 1
          fi
          
          echo "✅ Private key verified and saved"
          echo "PRIVATE_KEY_PATH=$(pwd)/private.pem" >> $GITHUB_ENV

      - name: Generate JWT Token
        id: generate-token
        env:
          PRIVATE_KEY_PATH: ${{ env.PRIVATE_KEY_PATH }}
          JWT_ISSUER: ${{ env.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ env.JWT_AUDIENCE }}
          CLERK_KEY_ID: ${{ env.CLERK_KEY_ID }}
          USER_ID: github-actions
        run: |
          echo "🔑 Generating JWT token..."
          echo "- Using key: $PRIVATE_KEY_PATH"
          echo "- Issuer: $JWT_ISSUER"
          echo "- Audience: $JWT_AUDIENCE"
          echo "- Key ID: $CLERK_KEY_ID"
          
          # Generate the token
          node scripts/generate-jwt.mjs

          if [ ! -f "jwt-token.txt" ]; then
            echo "::error::❌ JWT token file not found"
            exit 1
          fi

          JWT_TOKEN=$(cat jwt-token.txt)
          echo "✅ Token generated successfully"
          
          # Set outputs for subsequent steps
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
          echo "JWT_HEADER=Bearer $JWT_TOKEN" >> $GITHUB_ENV
          
          # Debug: Show token info
          echo "\n🔍 Token info:"
          echo "- Length: ${#JWT_TOKEN} characters"
          echo "- First 50 chars: ${JWT_TOKEN:0:50}..."
          
          # Try to decode and show token payload if jq is available
          if command -v jq &> /dev/null; then
            echo -n "- Payload: "
            echo "$JWT_TOKEN" | cut -d'.' -f2 | base64 -d 2>/dev/null | jq -c '{iss, aud, sub, iat, exp}' || echo "Failed to decode payload"
          fi

      # Diğer adımlar burada devam eder...
