name: Build and Publish EPUB

on:
  workflow_dispatch:
    inputs:
      content_id:
        description: 'Content ID for the book'
        required: true
        type: string
      format:
        description: 'Output format (epub, mobi, pdf, html, docx)'
        required: true
        default: 'epub'
        type: string
      metadata:
        description: 'Additional metadata as JSON string'
        required: false
        default: '{}'
        type: string

env:
  # Application configuration
  NEXT_PUBLIC_APP_URL: ${{ vars.NEXT_PUBLIC_APP_URL || 'https://matbu.vercel.app' }}
  NODE_ENV: production
  
  # JWT configuration
  JWT_ISSUER: ${{ vars.JWT_ISSUER || 'clerk.matbu.vercel.app' }}
  JWT_AUDIENCE: ${{ vars.JWT_AUDIENCE || 'clerk' }}
  
  # Secrets - these should be set in GitHub repository secrets
  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN || github.token }}
  
  # Required for the workflow
  GITHUB_REPO_OWNER: bilgisen
  GITHUB_REPO_NAME: clerk

jobs:
  build-epub:
    name: Build EPUB
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            pandoc \
            texlive-xetex \
            texlive-fonts-recommended \
            texlive-latex-recommended \
            jq \
            wget \
            parallel

      - name: Generate JWT Token
        id: generate-token
        env:
          CONTENT_ID: ${{ github.event.inputs.content_id }}
          FORMAT: ${{ github.event.inputs.format }}
        run: |
          npm install jsonwebtoken
          node scripts/generate-jwt.js

          JWT_TOKEN=$(cat jwt-token.txt)
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV
          echo "JWT_HEADER=Bearer $JWT_TOKEN" >> $GITHUB_ENV
      
      - name: Fetch Book Payload
        id: fetch-payload
        env:
          # Inputs from workflow_dispatch
          CONTENT_ID: ${{ github.event.inputs.content_id }}
          FORMAT: ${{ github.event.inputs.format }}
          
          # Environment variables
          BASE_URL: ${{ env.NEXT_PUBLIC_APP_URL }}
        run: |
          echo "Fetching book payload for content ID: $CONTENT_ID"
          mkdir -p ./book-content/chapters
          
          # Fetch the book payload using the internal API with book ID
          PAYLOAD_URL="$BASE_URL/api/books/by-id/$CONTENT_ID/payload"
          echo "Fetching payload from: $PAYLOAD_URL"
          
          if ! curl -s -f -o ./book-content/payload.json \
                    -H "Accept: application/json" \
                    -H "Authorization: $JWT_HEADER" \
                    "$PAYLOAD_URL"; then
            echo "::error::Failed to download book payload"
            exit 1
          fi
          
          # Validate the payload
          if [ ! -s "./book-content/payload.json" ]; then
            echo "::error::Received empty payload"
            exit 1
          fi
          
          # Extract book info with better error handling
          set +e
          BOOK_TITLE=$(jq -r '.book.title // "Untitled Book"' ./book-content/payload.json 2>/dev/null)
          if [ $? -ne 0 ]; then
            echo "::error::Invalid payload format: failed to parse book title"
            jq . ./book-content/payload.json >&2
            exit 1
          fi
          
          BOOK_LANG=$(jq -r '.book.language // "en"' ./book-content/payload.json 2>/dev/null)
          COVER_URL=$(jq -r '.book.cover_url // empty' ./book-content/payload.json 2>/dev/null)
          STYLESHEET_URL=$(jq -r '.book.stylesheet_url // empty' ./book-content/payload.json 2>/dev/null)
          TOC_DEPTH=$(jq -r '.options.toc_depth // 2' ./book-content/payload.json 2>/dev/null)
          set -e
          
          # Download cover image if available
          if [ -n "$COVER_URL" ]; then
            echo "Downloading cover image from $COVER_URL"
            wget --header="Authorization: $JWT_HEADER" -O ./book-content/cover.jpg "$COVER_URL" || \
              echo "Warning: Failed to download cover image"
          fi
          
          # Download stylesheet if available
          if [ -n "$STYLESHEET_URL" ]; then
            echo "Downloading stylesheet from $STYLESHEET_URL"
            mkdir -p ./book-content/styles
            wget --header="Authorization: $JWT_HEADER" -O ./book-content/styles/epub.css "$STYLESHEET_URL" || \
              echo "Warning: Failed to download stylesheet"
          fi
          
          # Download chapters in parallel with better error handling
          echo "Downloading chapters..."
          if ! jq -r '.book.chapters[] | "\(.order) \(.url)"' ./book-content/payload.json 2>/dev/null > ./book-content/chapters-list.txt; then
            echo "::error::Failed to extract chapter list from payload"
            exit 1
          fi
          
          # Process chapters in batches to avoid rate limiting
          BATCH_SIZE=5
          TOTAL_CHAPTERS=$(wc -l < ./book-content/chapters-list.txt || echo 0)
          echo "Found $TOTAL_CHAPTERS chapters to process"
          
          if [ "$TOTAL_CHAPTERS" -gt 0 ]; then
            for ((i=0; i<TOTAL_CHAPTERS; i+=BATCH_SIZE)); do
              echo "Processing chapters $((i+1))-$((i+BATCH_SIZE)) of $TOTAL_CHAPTERS..."
              cat ./book-content/chapters-list.txt | \
                tail -n +$((i+1)) | head -n $BATCH_SIZE | \
                while read -r ORDER URL; do
                  echo "Downloading chapter $ORDER..."
                  if ! curl -s -f -o "./book-content/chapters/chapter-${ORDER}.xhtml" \
                           -H "Accept: application/json" \
                           -H "Authorization: $JWT_HEADER" \
                           "$URL"; then
                    echo "::warning::Failed to download chapter $ORDER"
                    false
                  fi
                done
              
              # Small delay between batches
              sleep 1
            done
          else
            echo "No chapters found in the payload"
          fi
          
          # Download imprint if enabled
          if [ "$(jq -r '.options.include_imprint // false' ./book-content/payload.json 2>/dev/null)" = "true" ]; then
            IMPRINT_URL=$(jq -r '.book.imprint.url // empty' ./book-content/payload.json 2>/dev/null)
            if [ -n "$IMPRINT_URL" ]; then
              echo "Downloading imprint from $IMPRINT_URL"
              wget --header="Authorization: $JWT_HEADER" -O ./book-content/imprint.xhtml "$IMPRINT_URL" || \
                echo "Warning: Failed to download imprint"
            fi
          fi
          
          echo "All content downloaded successfully"

      - name: Generate EPUB with Pandoc
        env:
          CONTENT_ID: ${{ github.event.inputs.content_id }}
        run: |
          echo "Generating EPUB for content ID: $CONTENT_ID"
          mkdir -p ./output
          
          # Get options from payload with error handling
          set +e
          GENERATE_TOC=$(jq -r '.options.generate_toc // true' ./book-content/payload.json 2>/dev/null || echo 'true')
          INCLUDE_IMPRINT=$(jq -r '.options.include_imprint // true' ./book-content/payload.json 2>/dev/null || echo 'true')
          TOC_DEPTH=$(jq -r '.options.toc_depth // 2' ./book-content/payload.json 2>/dev/null || echo 2)
          
          # Get metadata from payload with defaults
          TITLE=$(jq -r '.book.title // "Untitled Book"' ./book-content/payload.json 2>/dev/null || echo 'Untitled Book')
          AUTHOR=$(jq -r '.book.author // "Unknown Author"' ./book-content/payload.json 2>/dev/null || echo 'Unknown Author')
          LANGUAGE=$(jq -r '.book.language // "en"' ./book-content/payload.json 2>/dev/null || echo 'en')
          set -e
          
          echo "Book: $TITLE by $AUTHOR"
          echo "Language: $LANGUAGE"
          
          # Prepare the list of files to include in the EPUB
          FILES=()
          PANDOC_OPTS=()
          
          # Add TOC options if enabled
          if [ "$GENERATE_TOC" = "true" ]; then
            PANDOC_OPTS+=("--toc" "--toc-depth=$TOC_DEPTH")
            echo "Including table of contents with depth: $TOC_DEPTH"
          else
            echo "Table of contents generation is disabled"
          fi
          
          # Add cover if available and enabled
          if [ -f "./book-content/cover.jpg" ]; then
            FILES+=("--epub-cover-image=./book-content/cover.jpg")
            echo "Including cover image"
          else
            echo "No cover image found"
          fi
          
          # Add stylesheet if available
          if [ -f "./book-content/styles/epub.css" ]; then
            FILES+=("--css=./book-content/styles/epub.css")
            echo "Including custom stylesheet"
          fi
          
          # Add chapters in order
          CHAPTER_FILES=$(find ./book-content/chapters -name "chapter-*.xhtml" | sort -V)
          if [ -n "$CHAPTER_FILES" ]; then
            while IFS= read -r file; do
              FILES+=("$file")
            done <<< "$CHAPTER_FILES"
            echo "Found ${#FILES[@]} chapters to include"
          else
            echo "Warning: No chapter files found"
          fi
          
          # Add imprint if enabled and available
          if [ "$INCLUDE_IMPRINT" = "true" ] && [ -f "./book-content/imprint.xhtml" ]; then
            FILES+=("./book-content/imprint.xhtml")
            echo "Including imprint page"
          elif [ "$INCLUDE_IMPRINT" = "true" ]; then
            echo "Warning: Imprint was enabled but not found"
          fi
          
          # Generate EPUB using Pandoc
          echo "Running Pandoc with ${#FILES[@]} files"
          
          # Create output directory if it doesn't exist
          mkdir -p ./output
          
          # Build the full command
          set -x  # Print commands for debugging
          pandoc \
            --from=html \
            --to=epub3 \
            --output="./output/$CONTENT_ID.epub" \
            --epub-chapter-level=1 \
            --metadata="title:$TITLE" \
            --metadata="author:$AUTHOR" \
            --metadata="language:$LANGUAGE" \
            --metadata="identifier:$CONTENT_ID" \
            "${PANDOC_OPTS[@]}" \
            "${FILES[@]}"
          
          # Verify EPUB was created
          if [ ! -f "./output/$CONTENT_ID.epub" ]; then
            echo "Error: Failed to generate EPUB"
            exit 1
          fi
          
          echo "EPUB generated successfully at ./output/$CONTENT_ID.epub"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: epub-file
          path: ./output/*.epub
          retention-days: 1