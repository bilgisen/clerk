name: Publish Content

# This workflow is called by the backend with a pre-authenticated combined token
on:
  workflow_call:
    inputs:
      session_id:
        description: 'Publish session ID from the backend'
        required: true
        type: string
      nonce:
        description: 'One-time nonce for this publish session'
        required: true
        type: string
      content_id:
        description: 'Content ID for the book'
        required: true
        type: string
      slug:
        description: 'Slug for the book (optional)'
        required: false
        type: string
      metadata:
        description: 'Additional metadata (JSON string)'
        required: false
        type: string
    secrets:
      COMBINED_TOKEN:
        description: 'Pre-authenticated combined token for API access'
        required: true

# Required permissions
permissions:
  contents: read    # Checkout repo
  actions: read     # For workflow run information

# Environment variables
env:
  NODE_ENV: production
  BACKEND_URL: ${{ vars.BACKEND_URL || 'https://editor.bookshall.com' }}

jobs:
  build-epub:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install system deps
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl jq pandoc

      - name: Validate inputs
        run: |
          if [ -z "${{ inputs.session_id }}" ] || [ -z "${{ inputs.nonce }}" ] || [ -z "${{ inputs.content_id }}" ]; then
            echo "Missing required inputs"
            exit 1
          fi
          
          # Set environment variables from inputs
          echo "SESSION_ID=${{ inputs.session_id }}" >> $GITHUB_ENV
          echo "NONCE=${{ inputs.nonce }}" >> $GITHUB_ENV
          echo "CONTENT_ID=${{ inputs.content_id }}" >> $GITHUB_ENV
          
          if [ -n "${{ inputs.slug }}" ]; then
            echo "SLUG=${{ inputs.slug }}" >> $GITHUB_ENV
          fi
          
          # Mask sensitive values
          echo "::add-mask::${{ secrets.COMBINED_TOKEN }}"

      - name: Update status (started)
        env:
          COMBINED_TOKEN: ${{ secrets.COMBINED_TOKEN }}
        run: |
          curl -X POST "$BACKEND_URL/api/publish/update" \
            -H "Authorization: Bearer $COMBINED_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "status": "in-progress",
              "phase": "initializing",
              "message": "Starting build process",
              "progress": 5
            }' || echo "Warning: Failed to update status"

      - name: Fetch book content
        env:
          CONTENT_ID: ${{ env.CONTENT_ID }}
          BASE_URL: ${{ env.BACKEND_URL }}
          COMBINED_TOKEN: ${{ secrets.COMBINED_TOKEN }}
        run: |
          set -e
          mkdir -p ./book-content ./output
          chmod +x ./scripts/fetch-book.sh
          ./scripts/fetch-book.sh

      - name: Generate EPUB
        run: |
          CONTENT_ID="${{ github.event.inputs.content_id }}"
          TITLE=$(jq -r '.book.title // "Untitled"' ./book-content/payload.json)
          AUTHOR=$(jq -r '.book.author // "Unknown"' ./book-content/payload.json)
          LANGUAGE=$(jq -r '.book.language // "tr"' ./book-content/payload.json)

          PANDOC_CMD=(
            pandoc
            --from=html
            --to=epub3
            --output=./output/${CONTENT_ID}.epub
            --epub-chapter-level=1
            --metadata=title:"$TITLE"
            --metadata=author:"$AUTHOR"
            --metadata=language:"$LANGUAGE"
            --metadata=identifier:"$CONTENT_ID"
          )

          [ -f "./book-content/cover.jpg" ] && PANDOC_CMD+=(--epub-cover-image=./book-content/cover.jpg)
          [ -f "./book-content/styles/epub.css" ] && PANDOC_CMD+=(--css=./book-content/styles/epub.css)

          while IFS= read -r -d $'\0' file; do
            PANDOC_CMD+=("$file")
          done < <(find ./book-content -type f -name 'chapter-*.xhtml' -print0 | sort -z -V)

          [ -f "./book-content/imprint.xhtml" ] && PANDOC_CMD+=("./book-content/imprint.xhtml")

          echo "üìñ Building EPUB..."
          "${PANDOC_CMD[@]}"

          curl -X POST "$BACKEND_URL/api/publish/status" \
            -H "Authorization: Bearer $COMBINED_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"phase": "building", "progress": 50, "message": "EPUB generated"}'

      - name: Upload EPUB to Cloudflare R2
        run: |
          CONTENT_ID="${{ github.event.inputs.content_id }}"
          FILE_PATH="./output/${CONTENT_ID}.epub"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          [ -z "$RAW_SLUG" ] && RAW_SLUG=$(jq -r '.book.title // "untitled"' ./book-content/payload.json)
          TL=$(printf "%s" "$RAW_SLUG" | iconv -f UTF-8 -t ASCII//TRANSLIT 2>/dev/null || echo "$RAW_SLUG")
          SLUG=$(echo "$TL" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')
          [ -z "$SLUG" ] && SLUG="$CONTENT_ID"
          KEY="books/${SLUG}-${CONTENT_ID}.epub"

          echo "üì§ Uploading EPUB to R2..."
          curl -X PUT "${R2_ENDPOINT}/${R2_BUCKET}/${KEY}" \
            -H "Authorization: Bearer ${R2_ACCESS_KEY_ID}:${R2_SECRET_ACCESS_KEY}" \
            -H "Content-Type: application/epub+zip" \
            --upload-file "$FILE_PATH"

          EPUB_URL="${R2_PUBLIC_URL}/${R2_BUCKET}/${KEY}"
          echo "üîÑ Updating book with new EPUB URL: $EPUB_URL"

          curl -X POST "$BACKEND_URL/api/books/by-id/${CONTENT_ID}/epub" \
            -H "Authorization: Bearer $COMBINED_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"epubUrl\":\"${EPUB_URL}\"}"

          curl -X POST "$BACKEND_URL/api/publish/status" \
            -H "Authorization: Bearer $COMBINED_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"phase": "uploading", "progress": 90, "message": "EPUB uploaded to R2"}'
        env:
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_PUBLIC_URL: ${{ secrets.R2_PUBLIC_URL }}

      - name: Finalize publish
        if: always()
        env:
          COMBINED_TOKEN: ${{ secrets.COMBINED_TOKEN }}
        run: |
          # Always try to finalize, even if previous steps failed
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ Publish completed successfully"
            
            # Final success update
            curl -X POST "$BACKEND_URL/api/publish/update" \
              -H "Authorization: Bearer $COMBINED_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "completed",
                "phase": "completed",
                "progress": 100,
                "message": "Publish completed successfully",
                "result": {
                  "workflowRunId": "${{ github.run_id }}",
                  "commit": "${{ github.sha }}",
                  "runNumber": "${{ github.run_number }}",
                  "success": true
                }
              }' || echo "Warning: Failed to update final status"
          else
            echo "‚ùå Publish failed"
            
            # Final error update
            curl -X POST "$BACKEND_URL/api/publish/update" \
              -H "Authorization: Bearer $COMBINED_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{
                "status": "failed",
                "phase": "error",
                "progress": 100,
                "message": "Publish failed in GitHub Actions workflow",
                "error": {
                  "message": "Workflow execution failed",
                  "details": {
                    "workflowRunId": "${{ github.run_id }}",
                    "runNumber": "${{ github.run_number }}",
                    "runAttempt": "${{ github.run_attempt }}"
                  }
                }
              }' || echo "Warning: Failed to update error status"
            
            # Exit with error to mark the job as failed
            exit 1
          fi