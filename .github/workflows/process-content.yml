name: Build EPUB

on:
  workflow_dispatch:
    inputs:
      content_id:
        description: 'Content ID for the book'
        required: true
        type: string
      slug:
        description: 'Slug for the book'
        required: false
        type: string
      metadata:
        description: 'Additional metadata (optional)'
        required: false
        type: string

env:
  NODE_ENV: production
  API_BASE_URL: 'https://editor.bookshall.com'
  GHA_OIDC_AUDIENCE: 'https://editor.bookshall.com/api/ci'

jobs:
  build-epub:
    name: Build EPUB
    runs-on: ubuntu-latest
    container:
      image: pandoc/core:3.2

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate OIDC Token
        id: generate_token
        run: |
          echo "üîë Requesting OIDC token with audience: $GHA_OIDC_AUDIENCE"
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=$GHA_OIDC_AUDIENCE" | jq -r '.value')
          if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
            echo "::error::Failed to obtain OIDC token"
            exit 1
          fi
          echo "token=$OIDC_TOKEN" >> $GITHUB_OUTPUT
          echo "audience=$GHA_OIDC_AUDIENCE" >> $GITHUB_OUTPUT

      - name: Fetch Book Content
        env:
          CONTENT_ID: ${{ github.event.inputs.content_id }}
          JWT_TOKEN: ${{ steps.generate_token.outputs.token }}
          API_BASE_URL: ${{ env.API_BASE_URL }}
        run: |
          set -e
          echo "üîê Using JWT with audience: ${{ steps.generate_token.outputs.audience }}"
          export JWT_HEADER="Bearer $JWT_TOKEN"
          export CONTENT_ID
          mkdir -p ./book-content
          chmod +x ./scripts/fetch-book.sh
          ./scripts/fetch-book.sh
          mkdir -p ./output

      - name: Generate EPUB
        run: |
          CONTENT_ID="${{ github.event.inputs.content_id }}"
          TITLE=$(jq -r '.book.title // "Untitled"' ./book-content/payload.json)
          AUTHOR=$(jq -r '.book.author // "Unknown"' ./book-content/payload.json)
          LANGUAGE=$(jq -r '.book.language // "tr"' ./book-content/payload.json)

          PANDOC_CMD=(
            pandoc
            --from=html
            --to=epub3
            --output=./output/${CONTENT_ID}.epub
            --epub-chapter-level=1
            --metadata=title:"$TITLE"
            --metadata=author:"$AUTHOR"
            --metadata=language:"$LANGUAGE"
            --metadata=identifier:"$CONTENT_ID"
          )

          if [ -f "./book-content/cover.jpg" ]; then
            PANDOC_CMD+=(--epub-cover-image=./book-content/cover.jpg)
          fi
          if [ -f "./book-content/styles/epub.css" ]; then
            PANDOC_CMD+=(--css=./book-content/styles/epub.css)
          fi

          while IFS= read -r -d $'\0' file; do
            PANDOC_CMD+=("$file")
          done < <(find ./book-content -type f -name 'chapter-*.xhtml' -print0 | sort -z -V)

          if [ -f "./book-content/imprint.xhtml" ]; then
            PANDOC_CMD+=("./book-content/imprint.xhtml")
          fi

          echo "üìñ Building EPUB..."
          "${PANDOC_CMD[@]}"

          ls -lh ./output

      - name: Upload EPUB to Cloudflare R2
        id: r2_upload
        run: |
          CONTENT_ID="${{ github.event.inputs.content_id }}"
          FILE_PATH="./output/${CONTENT_ID}.epub"
          RAW_SLUG="${{ github.event.inputs.slug }}"
          if [ -z "$RAW_SLUG" ]; then
            RAW_SLUG=$(jq -r '.book.title // "untitled"' ./book-content/payload.json)
          fi
          TL=$(printf "%s" "$RAW_SLUG" | iconv -f UTF-8 -t ASCII//TRANSLIT 2>/dev/null || echo "$RAW_SLUG")
          SLUG=$(echo "$TL" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g' | sed -E 's/^-+|-+$//g')
          [ -z "$SLUG" ] && SLUG="$CONTENT_ID"
          KEY="books/${SLUG}-${CONTENT_ID}.epub"

          echo "üöÄ Uploading to R2 as $KEY"
          npx --yes @aws-sdk/client-s3 node ./scripts/upload-epub-to-r2.mjs --file "$FILE_PATH" --key "$KEY"